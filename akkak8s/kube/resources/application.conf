akka {
  loglevel = "DEBUG"
  actor.provider = cluster

  coordinated-shutdown.exit-jvm = on
  actor {
    serialization-bindings {
      "akka.sample.cluster.kubernetes.CborSerializable" = jackson-cbor
    }
    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
    }

  }
  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 60s
  }
}

#management-config
akka.management {
  cluster.bootstrap {
    contact-point-discovery {
      # pick the discovery method you'd like to use:
      discovery-method = kubernetes-api

      required-contact-point-nr = ${REQUIRED_CONTACT_POINT_NR}
    }
  }
}
#management-config

akka.management {
  health-checks {
    readiness-checks {
      example-ready = "akka.sample.cluster.kubernetes.DemoHealthCheck"
    }
  }
}



cinnamon.opentelemetry {
  metrics {
    exporters += grpc-exporter,

    grpc-exporter {
      # Define the interval of reads.
      interval = 10 seconds

      # Sets the OTLP endpoint to connect to. The endpoint must start with either http:// or https://.
      endpoint = "http://192.168.1.159:4317"

    }

    #//exporters += logging-exporter
    #exporters += http-exporter
  }
  events {
    exporters += grpc-exporter
    #exporters += http-exporter
  }
}

cinnamon{
  akka {
    cluster.domain-events = on
    cluster.member-events = on
    cluster.node-status = on
    cluster.singleton-events = on
    cluster.shard-region-info = on
    actors {
      "/user" {
        report-by = instance
      }
      "/user/*" {
        report-by = group
      }
    }
    http.servers {
      "*:*" {
        paths {
          "*" {
            metrics = on
          }
        }
      }
    }
  }

}